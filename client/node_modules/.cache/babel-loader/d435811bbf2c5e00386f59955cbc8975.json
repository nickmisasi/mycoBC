{"ast":null,"code":"var _jsxFileName = \"/Users/ryanrudzitis/Projects/mycoBC/client/src/components/recordList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { usePopup, DialogType } from \"react-custom-popup\"; // function showMushroomInfo(props) {\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(Card, {\n  style: {\n    width: '18rem'\n  },\n  children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n    variant: \"top\",\n    src: \"holder.js/100px180\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n      children: props.record.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n      children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: myComponent,\n      children: \"Learn more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this);\n\n_c = Record;\n\nconst MyComponent = props => {\n  _s();\n\n  const {\n    showAlert\n  } = usePopup();\n\n  const buttonPressed = () => {\n    showAlert({\n      title: \"Error\",\n      type: DialogType.WARNING,\n      text: \"A simple error alert\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: buttonPressed\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MyComponent, \"qMbtRejKQ5e8s2SE+WPDjXpJsJo=\", false, function () {\n  return [usePopup];\n});\n\n_c2 = MyComponent;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.deleteRecord = this.deleteRecord.bind(this);\n    this.state = {\n      records: []\n    };\n  } // This method will get the data from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/record/\").then(response => {\n      this.setState({\n        records: response.data\n      }); // console.log(response.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // This method will delete a record based on the method\n\n\n  deleteRecord(id) {\n    axios.delete(\"http://localhost:5000/\" + id).then(response => {\n      console.log(response.data);\n    });\n    this.setState({\n      record: this.state.records.filter(el => el._id !== id)\n    });\n  } // This method will map out the users on the table\n\n\n  recordList() {\n    return this.state.records.map(currentrecord => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: currentrecord,\n        deleteRecord: this.deleteRecord\n      }, currentrecord._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    });\n  } // This following section will display a card for each database record\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.recordList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction ShowMushroomInfo(props) {\n  _s2();\n\n  const showAlert = usePopup();\n  showAlert({\n    title: \"Error\",\n    type: DialogType.WARNING,\n    text: \"A simple error alert\"\n  });\n}\n\n_s2(ShowMushroomInfo, \"6KSPSN9iu4ElP1uC5ekCJx+ylF8=\", false, function () {\n  return [usePopup];\n});\n\n_c3 = ShowMushroomInfo;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Record\");\n$RefreshReg$(_c2, \"MyComponent\");\n$RefreshReg$(_c3, \"ShowMushroomInfo\");","map":{"version":3,"sources":["/Users/ryanrudzitis/Projects/mycoBC/client/src/components/recordList.js"],"names":["React","Component","axios","Link","Card","Button","usePopup","DialogType","Record","props","width","record","name","myComponent","MyComponent","showAlert","buttonPressed","title","type","WARNING","text","RecordList","constructor","deleteRecord","bind","state","records","componentDidMount","get","then","response","setState","data","catch","error","console","log","id","delete","filter","el","_id","recordList","map","currentrecord","render","ShowMushroomInfo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport {usePopup, DialogType} from \"react-custom-popup\";\n\n// function showMushroomInfo(props) {\n  \n// }\n\nconst Record = (props) => (\n  <Card style={{ width: '18rem' }}>\n    <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n    <Card.Body>\n      <Card.Title>{props.record.name}</Card.Title>\n      <Card.Text>\n        Some quick example text to build on the card title and make up the bulk of\n        the card's content.\n      </Card.Text>\n      <Button variant=\"primary\" onClick={myComponent}>Learn more</Button>\n    </Card.Body>\n  </Card>\n);\n\nconst MyComponent = (props) => {\n\n  const {showAlert} = usePopup();\n\n  const buttonPressed = () => {\n\n      showAlert({\n          title: \"Error\",\n          type: DialogType.WARNING,\n          text: \"A simple error alert\"\n      });\n\n  }\n\n  return (\n      <button onClick={buttonPressed}></button>\n  );\n}\n\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.deleteRecord = this.deleteRecord.bind(this);\n    this.state = { records: [] };\n  }\n\n  // This method will get the data from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/record/\")\n      .then((response) => {\n        this.setState({ records: response.data });\n        // console.log(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // This method will delete a record based on the method\n  deleteRecord(id) {\n    axios.delete(\"http://localhost:5000/\" + id).then((response) => {\n      console.log(response.data);\n    });\n\n    this.setState({\n      record: this.state.records.filter((el) => el._id !== id),\n    });\n  }\n\n  // This method will map out the users on the table\n  recordList() {\n    return this.state.records.map((currentrecord) => {\n      return (\n        <Record\n          record={currentrecord}\n          deleteRecord={this.deleteRecord}\n          key={currentrecord._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display a card for each database record\n  render() {\n    return (\n      <div>\n        {this.recordList()}\n      </div>\n\n    );\n  }\n}\n\nfunction ShowMushroomInfo(props) {\n  const showAlert = usePopup();\n\n  showAlert({\n    title: \"Error\",\n    type: DialogType.WARNING,\n    text: \"A simple error alert\"\n});\n\n  \n}\n"]},"metadata":{},"sourceType":"module"}