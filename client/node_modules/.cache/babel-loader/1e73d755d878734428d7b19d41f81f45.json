{"ast":null,"code":"var _jsxFileName = \"/Users/ryanrudzitis/Projects/mycoBC/client/src/components/recordList.js\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card } from 'react-bootstrap';\nimport MushroomInfo from './mushroomInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myStyle = {\n  padding: 2,\n  margin: '0 auto',\n  width: '18rem'\n};\n\nconst Record = props => /*#__PURE__*/_jsxDEV(Card, {\n  style: myStyle,\n  className: \"mb-2 text-center\",\n  children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n    variant: \"top\",\n    src: props.record.img\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n      children: props.record.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MushroomInfo, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this);\n\n_c = Record;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: [],\n      filterEdible: false,\n      filterPoisonous: false //filter: props.filter? get option from dropdown that calls recordlist\n\n    };\n  } // This method will get the data from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/record/\").then(response => {\n      this.setState({\n        records: response.data\n      }); // console.log(response.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  filterStatus() {\n    if (!this.props.filterBy == \"none\") {\n      console.log(\"filtering!\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Filtering by: \", this.props.filterBy]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    }\n  } // This method will map out the users on the table\n\n\n  recordList() {\n    return this.state.records.map(currentrecord => {\n      if (this.props.filterBy === \"edible\") {\n        if (currentrecord.edible.includes(\"Yes\")) {\n          return /*#__PURE__*/_jsxDEV(Record, {\n            record: currentrecord\n          }, currentrecord._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this);\n        }\n      } else if (this.props.filterBy === \"poisonous\") {\n        if (currentrecord.poisonous.includes(\"Yes\")) {\n          return /*#__PURE__*/_jsxDEV(Record, {\n            record: currentrecord\n          }, currentrecord._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this);\n        }\n      } else {\n        return /*#__PURE__*/_jsxDEV(Record, {\n          record: currentrecord\n        }, currentrecord._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this);\n      }\n    });\n  } // This following section will display a card for each database record\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [this.filterStaus(), this.recordList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/Users/ryanrudzitis/Projects/mycoBC/client/src/components/recordList.js"],"names":["React","Component","axios","Card","MushroomInfo","myStyle","padding","margin","width","Record","props","record","img","name","RecordList","constructor","state","records","filterEdible","filterPoisonous","componentDidMount","get","then","response","setState","data","catch","error","console","log","filterStatus","filterBy","recordList","map","currentrecord","edible","includes","_id","poisonous","render","filterStaus"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Card } from 'react-bootstrap';\nimport MushroomInfo from './mushroomInfo';\n\nconst myStyle = {\n  padding: 2,\n  margin: '0 auto',\n  width: '18rem'\n};\n\nconst Record = (props) => (\n\n  <Card style={myStyle} className='mb-2 text-center'>\n    <Card.Img variant=\"top\" src={props.record.img} />\n    <Card.Body>\n      <Card.Title>{props.record.name}</Card.Title>\n      <MushroomInfo {...props} />\n      {/* <Button variant=\"primary\" onClick={() => console.log(\"hello\")}>Learn more</Button> */}\n    </Card.Body>\n  </Card>\n);\n\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n\n\n    this.state = {\n      records: [],\n      filterEdible: false,\n      filterPoisonous: false\n      //filter: props.filter? get option from dropdown that calls recordlist\n    };\n  }\n\n\n\n  // This method will get the data from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/record/\")\n      .then((response) => {\n        this.setState(\n          {\n            records: response.data\n          });\n        // console.log(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  filterStatus() {\n    if(!this.props.filterBy == \"none\") {\n      console.log(\"filtering!\");\n      return (\n        <div>\n          <p>Filtering by: {this.props.filterBy}</p>\n        </div>\n      );\n    }\n  }\n\n  // This method will map out the users on the table\n  recordList() {\n    return this.state.records.map((currentrecord) => {\n      if(this.props.filterBy === \"edible\") {\n        if (currentrecord.edible.includes(\"Yes\")) {\n          return (\n            <Record\n              record={currentrecord}\n              key={currentrecord._id}\n            />\n          );\n        }\n      } else if (this.props.filterBy === \"poisonous\") {\n        if (currentrecord.poisonous.includes(\"Yes\")) {\n          return (\n            <Record\n              record={currentrecord}\n              key={currentrecord._id}\n            />\n          );\n        }\n      } else {\n        return (\n          <Record\n            record={currentrecord}\n            key={currentrecord._id}\n          />\n        );\n      }\n    });\n  }\n\n  // This following section will display a card for each database record\n  render() {\n    return (\n      <div className='mb-3'>\n        {this.filterStaus()}\n        {this.recordList()}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}